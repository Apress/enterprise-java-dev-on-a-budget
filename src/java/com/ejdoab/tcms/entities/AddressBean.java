package com.ejdoab.tcms.entities;

/**
 * A TCMS domain entity for table: ADDRESSES
 * Generated by Middlegen CMP2.0 Plugin 
 *
 * @author <a href="http://boss.bekk.no/boss/middlegen/">Middlegen</a>
 *
 *
 * @ejb.bean
 *    type="CMP"
 *    cmp-version="2.x"
 *    name="Address"
 *    local-jndi-name="ejb.AddressLocalHome"
 *    view-type="local"
 *    primkey-field="id"
 *
 * @ejb.finder
 *    signature="java.util.Collection findAll()"
 *    result-type-mapping="Local"
 *    method-intf="LocalHome"
 *    query="SELECT OBJECT(o) FROM Address o"
 *
 * @ejb.finder
 *    signature="java.util.Collection findByStreetAddress(java.lang.String streetAddress)"
 *    result-type-mapping="Local"
 *    method-intf="LocalHome"
 *    query="SELECT DISTINCT OBJECT(o) FROM Address o WHERE o.streetAddress = ?1"
 *    description="STREETADDRESS is not indexed."
 *
 * @ejb.finder
 *    signature="java.util.Collection findByAptNumber(java.lang.String aptNumber)"
 *    result-type-mapping="Local"
 *    method-intf="LocalHome"
 *    query="SELECT DISTINCT OBJECT(o) FROM Address o WHERE o.aptNumber = ?1"
 *    description="APTNUMBER is not indexed."
 *
 * @ejb.finder
 *    signature="java.util.Collection findByCity(java.lang.String city)"
 *    result-type-mapping="Local"
 *    method-intf="LocalHome"
 *    query="SELECT DISTINCT OBJECT(o) FROM Address o WHERE o.city = ?1"
 *    description="CITY is not indexed."
 *
 * @ejb.finder
 *    signature="java.util.Collection findByState(java.lang.String state)"
 *    result-type-mapping="Local"
 *    method-intf="LocalHome"
 *    query="SELECT DISTINCT OBJECT(o) FROM Address o WHERE o.state = ?1"
 *    description="STATE is not indexed."
 *
 * @ejb.finder
 *    signature="java.util.Collection findByZipCode(java.lang.String zipCode)"
 *    result-type-mapping="Local"
 *    method-intf="LocalHome"
 *    query="SELECT DISTINCT OBJECT(o) FROM Address o WHERE o.zipCode = ?1"
 *    description="ZIPCODE is not indexed."
 *
 * @ejb.persistence table-name="ADDRESSES"
 *
 * @weblogic.data-source-name $plugin.middlegen.middlegenTask.datasourceJNDIName
 */
public abstract class AddressBean implements javax.ejb.EntityBean {

   /**
    * Returns the id
    * @todo support OracleClob,OracleBlob on WLS
    *
    * @return the id
    *
    * @ejb.pk-field
    * @ejb.interface-method view-type="local"
    * @ejb.persistence column-name="PK_ID"
    */
   public abstract java.lang.Integer getId();

   /**
    * Sets the id
    *
    * @param java.lang.Integer the new id value
    */
   public abstract void setId(java.lang.Integer id);

   /**
    * Returns the streetAddress
    * @todo support OracleClob,OracleBlob on WLS
    *
    * @return the streetAddress
    *
    * @ejb.interface-method view-type="local"
    * @ejb.persistence column-name="STREETADDRESS"
    */
   public abstract java.lang.String getStreetAddress();

   /**
    * Sets the streetAddress
    *
    * @param java.lang.String the new streetAddress value
    * @ejb.interface-method view-type="local"
    */
   public abstract void setStreetAddress(java.lang.String streetAddress);

   /**
    * Returns the aptNumber
    * @todo support OracleClob,OracleBlob on WLS
    *
    * @return the aptNumber
    *
    * @ejb.interface-method view-type="local"
    * @ejb.persistence column-name="APTNUMBER"
    */
   public abstract java.lang.String getAptNumber();

   /**
    * Sets the aptNumber
    *
    * @param java.lang.String the new aptNumber value
    * @ejb.interface-method view-type="local"
    */
   public abstract void setAptNumber(java.lang.String aptNumber);

   /**
    * Returns the city
    * @todo support OracleClob,OracleBlob on WLS
    *
    * @return the city
    *
    * @ejb.interface-method view-type="local"
    * @ejb.persistence column-name="CITY"
    */
   public abstract java.lang.String getCity();

   /**
    * Sets the city
    *
    * @param java.lang.String the new city value
    * @ejb.interface-method view-type="local"
    */
   public abstract void setCity(java.lang.String city);

   /**
    * Returns the state
    * @todo support OracleClob,OracleBlob on WLS
    *
    * @return the state
    *
    * @ejb.interface-method view-type="local"
    * @ejb.persistence column-name="STATE"
    */
   public abstract java.lang.String getState();

   /**
    * Sets the state
    *
    * @param java.lang.String the new state value
    * @ejb.interface-method view-type="local"
    */
   public abstract void setState(java.lang.String state);

   /**
    * Returns the zipCode
    * @todo support OracleClob,OracleBlob on WLS
    *
    * @return the zipCode
    *
    * @ejb.interface-method view-type="local"
    * @ejb.persistence column-name="ZIPCODE"
    */
   public abstract java.lang.String getZipCode();

   /**
    * Sets the zipCode
    *
    * @param java.lang.String the new zipCode value
    * @ejb.interface-method view-type="local"
    */
   public abstract void setZipCode(java.lang.String zipCode);

   /**
    * This is a uni-directional one-to-many relationship CMR method
    *
    * @return a java.util.Collection of related com.ejdoab.tcms.entities.VenueLocal.
    * middlegen.plugins.entitybean.Entity20Table@fbf51d
    * class middlegen.plugins.entitybean.Entity20Table
    * middlegen.plugins.entitybean.Entity20Table
    *
    * @ejb.relation
    *    name="ADDRESSES-cmp20-VENUES-cmp20"
    *    role-name="ADDRESSES-cmp20-has-VENUES-cmp20"
    *    target-ejb="Venue"
    *    target-role-name="VENUES-cmp20-has-ADDRESSES-cmp20"
    *    target-multiple="no"
    *
    * @jboss.relation-mapping style="foreign-key"
    *
    * @weblogic.target-column-map
    *    foreign-key-column="FK_ADDRESSID"
    *    key-column="PK_ID"
    *
    * @jboss.target-relation
    *    fk-constraint="true"
    *    fk-column="FK_ADDRESSID"
    *    related-pk-field="id"
    *
    */
   public abstract java.util.Collection getVenues();

   /**
    * Sets a collection of related com.ejdoab.tcms.entities.VenueLocal
    *
    * @param a collection of related com.ejdoab.tcms.entities.VenueLocal
    *
    * @ejb.interface-method view-type="local"
    *
    * @param venues the new CMR value
    */
   public abstract void setVenues(java.util.Collection venues);

   /**
    * This is a uni-directional one-to-many relationship CMR method
    *
    * @return a java.util.Collection of related com.ejdoab.tcms.entities.UserLocal.
    * middlegen.plugins.entitybean.Entity20Table@ca5bff
    * class middlegen.plugins.entitybean.Entity20Table
    * middlegen.plugins.entitybean.Entity20Table
    *
    * @ejb.relation
    *    name="ADDRESSES-cmp20-USERS-cmp20"
    *    role-name="ADDRESSES-cmp20-has-USERS-cmp20"
    *    target-ejb="User"
    *    target-role-name="USERS-cmp20-has-ADDRESSES-cmp20"
    *    target-multiple="no"
    *
    * @jboss.relation-mapping style="foreign-key"
    *
    * @weblogic.target-column-map
    *    foreign-key-column="FK_ADDRESSID"
    *    key-column="PK_ID"
    *
    * @jboss.target-relation
    *    fk-constraint="true"
    *    fk-column="FK_ADDRESSID"
    *    related-pk-field="id"
    *
    */
   public abstract java.util.Collection getUsers();

   /**
    * Sets a collection of related com.ejdoab.tcms.entities.UserLocal
    *
    * @param a collection of related com.ejdoab.tcms.entities.UserLocal
    *
    * @ejb.interface-method view-type="local"
    *
    * @param users the new CMR value
    */
   public abstract void setUsers(java.util.Collection users);

   /**
    * This create method takes only mandatory (non-nullable) parameters.
    *
    * When the client invokes a create method, the EJB container invokes the ejbCreate method. 
    * Typically, an ejbCreate method in an entity bean performs the following tasks: 
    * <UL>
    * <LI>Inserts the entity state into the database.</LI>
    * <LI>Initializes the instance variables.</LI>
    * <LI>Returns the primary key.</LI>
    * </UL>
    *
    * @return the primary key of the new instance
    *
    * @ejb.create-method
    */
   public java.lang.Integer ejbCreate(  ) throws javax.ejb.CreateException {
      // Use Middlegen's Sequence Block PK generator. Only works for numeric fields
      try {
         com.ejdoab.tcms.entities.SequenceSessionLocal sequenceGenerator = 
         com.ejdoab.tcms.entities.SequenceSessionUtil.getLocalHome().create();      
         setId(new java.lang.Integer(sequenceGenerator.getNextSequenceNumber( "ADDRESSES.PK_ID" )));
      } catch( javax.naming.NamingException e ) {
         throw new javax.ejb.CreateException(e.getMessage());
      }
      // Use XDoclet's GUID generator. Only works for String fields
      // This requires <utilobject includeGUID="true"/> in ejbdoclet.

      // Set CMP fields
      // EJB 2.0 spec says return null for CMP ejbCreate methods.
      return null;
   }

   /**
    * The container invokes thos method immediately after it calls ejbCreate. 
    *
    */
   public void ejbPostCreate(  ) throws javax.ejb.CreateException {
      // Set CMR fields
   }

   /**
    * This create method takes all parameters (both nullable and not nullable). 
    *
    * When the client invokes a create method, the EJB container invokes the ejbCreate method. 
    * Typically, an ejbCreate method in an entity bean performs the following tasks: 
    * <UL>
    * <LI>Inserts the entity state into the database.</LI>
    * <LI>Initializes the instance variables.</LI>
    * <LI>Returns the primary key.</LI>
    * </UL>
    *
    * @param streetAddress the streetAddress value
    * @param aptNumber the aptNumber value
    * @param city the city value
    * @param state the state value
    * @param zipCode the zipCode value
    * @return the primary key of the new instance
    *
    * @ejb.create-method
    */
   public java.lang.Integer ejbCreate( java.lang.String streetAddress, java.lang.String aptNumber, java.lang.String city, java.lang.String state, java.lang.String zipCode ) throws javax.ejb.CreateException {
      // Use Middlegen's Sequence Block PK generator. Only works for numeric fields
      try {
         com.ejdoab.tcms.entities.SequenceSessionLocal sequenceGenerator = 
         com.ejdoab.tcms.entities.SequenceSessionUtil.getLocalHome().create();      
         setId(new java.lang.Integer(sequenceGenerator.getNextSequenceNumber( "ADDRESSES.PK_ID" )));
      } catch( javax.naming.NamingException e ) {
         throw new javax.ejb.CreateException(e.getMessage());
      }
      // Use XDoclet's GUID generator. Only works for String fields
      // This requires <utilobject includeGUID="true"/> in ejbdoclet.

      // Set CMP fields
      setStreetAddress(streetAddress);
      setAptNumber(aptNumber);
      setCity(city);
      setState(state);
      setZipCode(zipCode);
      // EJB 2.0 spec says return null for CMP ejbCreate methods.
      return null;
   }

   /**
    * The container invokes thos method immediately after it calls ejbCreate. 
    *
    * @param streetAddress the streetAddress value
    * @param aptNumber the aptNumber value
    * @param city the city value
    * @param state the state value
    * @param zipCode the zipCode value
    */
   public void ejbPostCreate( java.lang.String streetAddress, java.lang.String aptNumber, java.lang.String city, java.lang.String state, java.lang.String zipCode ) throws javax.ejb.CreateException {
      // Set CMR fields
   }

     
   // No C:\tcms\src\middlegen\merge/cmp20-addresses-class-code.txt found.

}
